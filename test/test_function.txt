// Functions used for testing the algorithm.

function TestAllP(p, n, s)
    /* 

    Checks every cubic of the specific form a*x^3+b*x+c over a finite field and tells whether the checked cubics
    are dynamically irreducible over a certain number of iterations. Print the results for every checked cubic ('true' if a cubic
    is dynamically irreducible, 'false, i' if it fails to be D.I. at some i-th iteration).

    Parameters:
    p: a prime number of choice
    n: the number of iterations to perform
    s: the power of prime p

    */
    F:=FiniteField(p^s);
    S<x>:=PolynomialRing(F);
    w:=p^s-1;
    for f in [x^3 + b*x + c : b in [0..w], c in [0..w]] do
        // f; <- Uncomment this line to print the polynomials
        // Algorithm1v4(f, p, n, s);
        Algorithm2(f, p, n, s);
    end for;
    return "";
end function;

function TestAllPGen(p, n, s)
    /*

    Checks every cubic (not limited to those of a certain form) over a finite field and tells whether the checked cubics
    are dynamically irreducible over a certain number of iterations. Print the results for every checked cubic ('true' if a cubic
    is dynamically irreducible, 'false, i' if it fails to be D.I. at some i-th iteration).

    Parameters:
    p: a prime number of choice
    n: the number of iterations to perform
    s: the power of prime p

    */
    F:=FiniteField(p^s);
    S<x>:=PolynomialRing(F);
    w:=p^s-1;
    w2:=p-1;
    for f in [a*x^3 + b*x^2 + c*x + d : a in [1..w2], b in [0..w], c in [0..w], d in [0..w]] do
        // f;
        Algorithm2(f, p, n, s);
    end for;
    return "";
end function;

function DI_TestAllPGen(p, n, s)
    /* 
    
    Checks every cubic (not limited to those of a certain form) over a finite field and stores 
    cubics that are found to be dynamically irreducible over a certain number of iterations in a list.

    Parameters:
    p: a prime number of choice
    n: the number of iterations to perform
    s: the power of prime p

    Returns:
    P: List of found potentially dynamically irreducible cubics

    */
    F:=FiniteField(p^s);
    S<x>:=PolynomialRing(F);
    P:=[];
    w:=p^s-1;
    w2:=p-1;
    for f in [a*x^3 + b*x^2 + c*x + d : a in [1..w2], b in [0..w], c in [0..w], d in [0..w]] do
        // f;
        if Algorithm2(f, p, n, s) eq true then
            P:=Append();
        end if;
    end for;
    return P;
end function;