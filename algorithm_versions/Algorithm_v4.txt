// Takes in: function h = x^3+bx+c, prime p, number of iterates n, index s of p
// Returns: true if h is dynamically irreducible, otherwise returns false and the number of iterate where it fails to be
// Changes made from v3: 
//  (1) add case for polynomials with derivatives with non-distinct roots 
//  (2) add case for p = 2 mod 3

function Algorithm1v4(h, p, n, s) 
    // setup 1
    q:=p^s;
    h_der:=Derivative(h);
    CP:=Roots(h_der);
    // print "CP: ", CP; <- this is for debugging
    if #CP eq 2 then // case 1: if h_der has 2 distinct roots
        gamma1:=CP[1][1]; 
        gamma2:=CP[2][1];
    else
        if #CP eq 1 then
            if CP[1][2] eq 2 then // case 2: if h_der has 2 non-distinct roots
                gamma1:=CP[1][1];
                gamma2:=gamma1;
            else // case 3: 1 root
                return ["false", "1"];
            end if;
        else
            return ["false", "1"]; // case 4: no roots
        end if;
    end if;
    F:=FiniteField(q); 
    P<x>:=PolynomialRing(F);
    g:=x;
    count:=1;
    S:=SquareList(q); // create a list of squares in F 
    C:=CubeList(q); // create a list of cubes in F 
    b0:=Coefficient(h, 0);
    b1:=Coefficient(h, 1);    
    b3:=Coefficient(h, 3);
    // m_3:=F!-3; 
    // sqrt_minus_3:=Sqrt(m_3); --- delete these lines when no longer needed
    if IsIrreducible(h) eq false then
        return ["false", "1"];
    else
        g:=Evaluate(h,g);
        count:=count+1;
        for i in [2..n] do
            i_str:=IntegerToString(i);
            if ((s gt 1) and (p ge 5)) eq true then
                // setup 2
                g1:=Evaluate(g,gamma1);
                g2:=Evaluate(g,gamma2);
                check_obj:= -3*g1*g2;

                // check First Condition, return ["false", i_str] if cond. not met
                if IsSquareFp(Norm(check_obj), S) eq false then
                    return ["false", i_str];
                // --- else: proceed with the remaining conditions
                else 
                    // setup 3 for Theorem 17
                    if (q mod 3) eq 1 then
                        K<b>:=ext<F|g>;
                        m_3:=F!-3;
                        sqrt_minus_3:=Sqrt(m_3);
                    elif (q mod 3) eq 2 then
                        // R:=IntegerRing();
                        // R_pol<i>:=PolynomialRing(R);
                        // l:=i^2+3;
                        l:=x^2+3;
                        K<b>:=ext<F|g>;
                        K<c>:=ext<K|l>;
                        sqrt_minus_3:=c;
                    end if;
                    square_check_obj:= -4*(b1/b3)^3-27*((b0-b)/b3)^2;

                    // check Condition 1 of Theorem 17
                    if IsSquareFp(Norm(square_check_obj), S) eq true then
                        mu:=SquareRoot(square_check_obj/81);
                        cube_check_obj:=(1/2)*(-((b0-b)/b3)+mu*sqrt_minus_3);

                        // check Condition 2 of Proposition 2
                        if IsCubeFp(Norm(cube_check_obj), C) eq false then
                            g:=Evaluate(h,g);
                            count:=count+1;
                        else
                            return ["false", i_str];
                            break;
                        end if;
                    else 
                        return ["false", i_str];
                        break;
                    end if;
                end if;
            else
                // setup 3 for Theorem 17
                if (q mod 3) eq 1 then
                    K<b>:=ext<F|g>;
                    m_3:=F!-3;
                    sqrt_minus_3:=Sqrt(m_3);
                elif (q mod 3) eq 2 then
                    // R:=IntegerRing();
                    // R_pol<i>:=PolynomialRing(R);
                    // l:=i^2+3;
                    l:=x^2+3;
                    K<b>:=ext<F|g>;
                    K<c>:=ext<K|l>;
                    sqrt_minus_3:=c;
                end if;
                square_check_obj:= -4*(b1/b3)^3-27*((b0-b)/b3)^2;

                // check Condition 1 of Theorem 17
                if IsSquareFp(Norm(square_check_obj), S) eq true then
                    mu:=SquareRoot(square_check_obj/81);
                    cube_check_obj:=(1/2)*(-((b0-b)/b3)+mu*sqrt_minus_3);

                    // check Condition 2 of Proposition 2
                    if IsCubeFp(Norm(cube_check_obj), C) eq false then
                    g:=Evaluate(h,g);
                        count:=count+1;
                    else
                        return ["false", i_str];
                        break;
                    end if;
                end if;
            end if;
        end for;
    end if;
    return true;
end function;
